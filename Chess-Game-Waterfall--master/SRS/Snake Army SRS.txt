Table of Contents
Table of Contents	ii
Revision History	ii
1.	Introduction	1
1.1	Purpose	1
1.2	Document Conventions	1
1.3	Intended Audience and Reading Suggestions	1
1.4	Product Scope	1
1.5	References	1
2.	Overall Description	1
2.1	Product Perspective	1
2.2	Product Functions	1
2.3	User Classes and Characteristics	2
2.4	Operating Environment	2
2.5	Design and Implementation Constraints	2
2.6	User Documentation	2
2.7	Assumptions and Dependencies	2
3.	External Interface Requirements	2
3.1	User Interfaces	2
4.	System Features	2
4.1	Available Moves	2
4.2	Taken Pieces	2
4.3	Pawn Promotion	3
4.4	AI Difficulties	3
4.5	Game Sounds	3
4.6	Restart/Surrender	3
4.7	Play Timer	3
4.8	Board Rotation	4
Appendix A: Glossary	5
Appendix B: Analysis Models	5
Appendix C: To Be Determined List	5



 
1. Introduction

1.1 Purpose 
The purpose of this project is to better understand how to use the Waterfall process by creating a Chess game as a team project.

1.2 Document Conventions
To maintain order, keep every section of text separated by a space.

1.3 Intended Audience and Reading Suggestions
This document is intended to be viewed by those directly involved with the process of creating the software. This includes members of the Snake Army team and the 'client' Mr. Jason Diaz.
Snake Army members should begin reading this document from section 2, referring to section 1.5 for explanations on relevant issues, when applicable.
Mr. Jason Diaz should read the document in its entirety and attempt to locate Easter eggs, or just because effort was expended in creating this document.

1.4 Product Scope
This program is a chess game simulator. 1-2 players, human or AI, will take turns moving and taking pieces attempting to mate the other's king. The goal of this software is to show Snake Army superiority over all others.

1.5 References
1.	Bodlaender, Hans. “The Rules of Chess.” The Chess Variant Pages, www.chessvariants.com/d.chess/chess.html
2.	“Chessboard.” Wikipedia, Wikimedia Foundation, 24 Jan. 2018, en.wikipedia.org/wiki/Chessboard.

2. Overall Description

2.1 Product Perspective
This program will be a new, self-contained product designed to show the importance of the Waterfall method and design patterns.

2.2 Product Functions
•	User shall be able to choose the number of human players participating in the game. Choosing 0 players means 2 AI opponents will play a match against each other, 1 player means 1 human player and 1 AI player, 2 players means 2 human players playing against each other.
•	The game shall continue to run until one player mates the other's king, presses the 'surrender' button, or presses the 'restart' button.
•	Each unique piece shall act as described in Section 3.1.
•	The program shall start a match from the default starting position, with the white piece (if only 1 player is chosen, the player shall go before the AI).
•	The program shall keep track of the both color's king's check and mate.

2.3 User Classes and Characteristics
After delivery, only player users shall access the program, where they will choose to play or watch a match between 2 AI opponents. The AI opponent shall only make legal chess moves, and will not be able to surrender, restart, or otherwise quit the game/program.

2.4 Operating Environment
The program shall operate on Windows 10, utilizing the Java platform.

2.5 Design and Implementation Constraints
Any computer which attempts to run the software shall run Windows 10, with Java 9.0.1, or backwards compatible version and a working mouse.
The Snake Army group shall not be responsible for any of the software once it has been delivered. Changes requested shall be made through official channels where a new cost evaluation shall be generated.

2.6 User Documentation
No documentation other than the Software Requirement Specification, System Design Document, and associated code files. Manuals or tutorials, on-line or otherwise shall not be prepared.

2.7 Assumptions and Dependencies
The version of Windows 10 used is compatible with the required or compatible Java version.
3. External Interface Requirements

3.1 User Interfaces
The software shall have a user interface upon which the user may click and make choices using a mouse.

4. System Features

4.1 Available Moves
4.1.1	Description and Priority
	When selecting a piece on your turn, the squares where this piece may move shall light up indicating valid move. This will be a high priority feature and will be implemented as soon as the basic chess game is working.
4.1.2	Stimulus/Response Sequences
	When it is the player’s turn, the player will click on the piece they wish to move, and all available move locations for such piece will appear in a different coloration to indicate where the player may finish their move with the chosen piece.

4.2 Taken Pieces
4.2.1	Description and Priority
	As the game progresses, a list of the pieces each color has taken shall be kept, to show what each side has lost up until that point in the game. This will be a high priority that may be implemented along side the basic chess game,
4.2.2	Stimulus/Response Sequences
	When a piece is taken, a representation of the piece (name or shape) shall be shown on the side of the board.
	
4.3 Pawn Promotion
4.3.1	Description and Priority
	When selecting a pawn reaches the opponent’s end row, it may promote (transform) into any other piece. This will be a high priority feature and will be implemented as soon as the basic chess game is working.
4.3.2	Stimulus/Response Sequences
	When a player’s pawn reaches the opponent’s end row, a menu shall appear to allow the player to choose the pawn’s promotion piece.

4.4 AI Difficulties
4.4.1	Description and Priority
	When attempting to play the AI, the player shall get to choose between difficulties for the AI opponent. This is a medium priority and will be implemented after the basic AI is implemented.
4.4.2	Stimulus/Response Sequences
	When selecting 1 player, a second option shall appear to allow the difficulty of the AI to be selected.
	
4.5 Game Sounds
4.5.1	Description and Priority
	Upon making a move, taking a piece, winning or losing (vs AI only), the game shall make a sound. This is low priority and will be implemented only if time allows.
4.5.2	Stimulus/Response Sequences
	When it is the player’s turn, the player will click on the piece they wish to move, and all available move locations for such piece will appear in a different coloration to indicate where the player may finish their move with the chosen piece.
4.6 Restart/Surrender
4.6.1	Description and Priority
	Buttons shall be available to restart or end the current game. This is a high priority and shall be implemented alongside the basic chess game.
4.6.2	Stimulus/Response Sequences
	Upon pressing the surrender button, the game immediately ends, with the player whose turn it is losing.
4.7 Play Timer
4.7.1	Description and Priority
	Upon the start of a player’s turn, a timer shall show how long the player has taken to complete their turn. This is a low priority feature and shall be implemented if time allows.
	
4.7.2	Stimulus/Response Sequences
	None.
	

4.8 Board Rotation
4.8.1	Description and Priority
	The player whose turn it is shall always have their pieces on the lower part of the board. This is a medium priority feature and will be implemented prior to the AI difficulty implementation.
4.8.2	Stimulus/Response Sequences
	At the start of the player’s turn (only in 2 human player mode), the board shall rotate to show the current player’s pieces at the bottom of the screen. This feature shall be turned off if there is only 1 human player, as they will always be on the bottom of the screen.
 
Appendix A: Glossary
No acronyms currently used in this document.
Appendix B: Analysis Models

3.2	Functional Requirements

	1. The software shall have a user interface (ASCII text is fine, sprites, html images, etc.).

	2. The software shall have at least ONE form of AI implementation.
		* At bare minimum, AI will make intelligent decisions, knowing when it's at risk of losing valuable pieces.
		  i.e. Sacrifice a pawn for a knight.
		* Defend King or move King if he's threatened.
		* Attack King when given an opportunity.
		
	3. The software shall be user input driven.
		* Click a piece, and click where to go, as long as it is a legal move.

	4. The software shall begin from a main menu.
		* The user will choose number of players (0-2). 
		* Default positions can be found here: http://www.chessvariants.com/d.chess/chess.html
		* More specifics can be added to increase the document size.
		* The game begins with the white pieces moving first and the black pieces second.

	5. The software shall be able to allow only one move per turn.

	6. The software shall be able to determine a check mate and end the game.
		* When a player is in check, and he cannot make a move such that after the move, the king is not in check, then he is mated.

	7. Each piece shall move and attack only in their legal ways.
		a) Rook
			* The rook attacks in the same way it moves.
			* The rook moves in a straight line, horizontally or vertically in the + direction.
			* The rook shall not jump over other pieces, that is: all squares between the square where the rook starts its move and where the rook ends its move must be empty.
			* Rooks shall be worth 5 points.
		b) Bishop
			* The bishop attacks in the same way it moves.
			* The bishop moves in a straight diagonal line, in the X direction.
			* The bishop shall also not jump over other pieces.
			* The bishop shall be worth 3 points.
		c) Queen
			* The queen attacks in the same way it moves.
			* The queen has the combined moves of the rook and the bishop, i.e., the queen may move in any straight line, horizontal, vertical, or diagonal.
			* The queen shall also not jump over other pieces.
			* The queen shall be worth 9 points.
		d) Knight
			* The knight makes a move that consists of first one step in a horizontal or vertical direction, and then one step diagonally in an outward direction.
			* Knights shall be worth 3 points.
		e) Pawn
			* When a pawn has not moved at all, the pawn may choose to move one square forward, or two squares forward. Otherwise it shall only move one square directly forward.
			* Pawns shall only attack diagonally forward.
			* The pawn shall choose between attacking and moving.
			* If a pawn makes it to the opposing side of the chess board, it shall be promoted to any piece of choice.
			* Pawns shall be worth 1 point.
		f) King
			* The king shall move one square in any direction, so long as it does not put him under attack.
			* If the king has not moved, the rook has not moved, the space between the king and the rook cointains no other pieces, and the king is not in check nor is it moving into check, the king shall have the opportunity to “castle” itself. Which lets the king move two spaces towards the selected rook, and moves the rook to the square next to the king, on its opposite side. 


	8. The square where any piece ends their move shall not contain a piece of the same color.

	9. All pieces, when the square where their attack ends contains a piece of the opponent, then the opponent’s piece is taken.
		* Taken pieces are removed from the board, and out of play for the rest of the game. (Taking is not compulsory.)
		* Pieces that are captured shall be visible in a display on the right side of the game board.

	10. Each piece shall move in a contained area (the board) and shall not move off the board under any circumstances (including claiming a piece of the opposite color).

	11. Each turn (Excluding AI), the player(s) shall be granted an option of forfeiting the match if they wish to do so.

	12. Each time a player (Including AI) moves a piece, the game shall not allow the opposing player to make a move until the previous. piece is moved on the board.

	13. The spaces on the chess board shall be labeled on an XY axis where the origin begins at the bottom-left corner.
		* The Y axis shall be labeled 1-8 starting from the origin.
		* The X axis shall be labeled a-h starting from the origin.
